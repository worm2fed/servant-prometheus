name: servant-prometheus
version: 0.1.1
github: worm2fed/servant-prometheus
synopsis: Helpers for using prometheus with servant
description: Please see the README on GitHub at <https://github.com/worm2fed/servant-prometheus#readme>
category: Servant, Web, System
license: BSD-3-Clause
license-file: LICENSE
author: Andrii Demydenko <worm2fed@gmail.com>, Anchor Engineering <engineering@lists.anchor.net.au>, Servant Contributors
maintainer: Andrii Demydenko <worm2fed@gmail.com>

extra-source-files:
  - README.md
  - CHANGELOG.md
  - LICENSE

tested-with: GHC ==9.2.8

verbatim:
  cabal-version: 2.4

# We enable all extensions that we consider harmless by default
default-extensions:
  - BangPatterns
  - DataKinds
  - DeriveAnyClass
  - DeriveGeneric
  - DerivingStrategies
  - FlexibleContexts
  - FlexibleInstances
  - ImportQualifiedPost
  - OverloadedStrings
  - PolyKinds
  - RecordWildCards
  - ScopedTypeVariables
  - TypeOperators
  - UndecidableInstances

flags:
  warning-as-error:
    description: Assume every warning as error
    manual: true
    default: false

when:
  - condition: flag(warning-as-error)
    ghc-options: -Werror

ghc-options:
  # For details on warnings:
  # https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html

  # Enable all warnings and disable the ones we don’t care about
  - -Weverything

  # Turns off the more strict -Wmissing-signatures
  # See https://ghc.haskell.org/trac/ghc/ticket/14794#ticket
  - -Wno-missing-exported-signatures
  # Requires explicit imports of _every_ function (e.g. ‘$’); too strict
  - -Wno-missing-import-lists
  # When GHC can’t specialize a polymorphic function. No big deal and requires
  # fixing underlying libraries to solve
  - -Wno-missed-specialisations
  # See missed-specialisations
  - -Wno-all-missed-specialisations
  # Don’t use Safe Haskell warnings
  - -Wno-unsafe
  - -Wno-safe
  - -Wno-inferred-safe-imports
  - -Wno-missing-safe-haskell-mode
  # Warning for polymorphic local bindings; nothing wrong with those
  - -Wno-missing-local-signatures
  # Don’t warn if the monomorphism restriction is used
  - -Wno-monomorphism-restriction
  # Still need it, because generated cabal module uses prepositive position
  - -Wno-prepositive-qualified-module
  # Do not warn about missing kind signatures; there is no much sense for it
  # now, our project is not so type-complicated.
  - -Wno-missing-kind-signatures
  # Do not warn about implicit prelude since we use default one
  - -Wno-implicit-prelude

dependencies:
  - base >=4.10 && < 5

library:
  source-dirs: lib
  dependencies:
    - clock
    - ghc-prim
    - hashable
    - http-types
    - prometheus-client
    - servant
    - text
    - wai

tests:
  spec:
    source-dirs: test
    main: Spec.hs
    build-tools: hspec-discover:hspec-discover
    ghc-options:
      - -Wno-missing-export-lists
      - -threaded
      - '"-with-rtsopts=-N -A64m -AL256m"'
    dependencies:
      - aeson
      - containers
      - hspec
      - hspec-expectations-pretty-diff
      - http-client
      - prometheus-client
      - servant
      - servant-client
      - servant-prometheus
      - servant-server
      - text
      - wai
      - warp

benchmarks:
  bench:
    source-dirs: bench
    main: Main.hs
    ghc-options:
      - -threaded
      - '"-with-rtsopts=-N -A64m -AL256m"'
    dependencies:
      - process
      - servant-prometheus
      - servant-server
      - text
      - wai
      - warp
